generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  email         String        @unique
  firstName     String
  lastName      String
  password      String
  phone         Int
  address       String?
  city          String?
  state         String?
  accountNumber String?
  promoCode     String?
  otp           Int?
  pin           String?
  token         String?
  isVerified    Boolean?      @default(false)
  isActive      Boolean       @default(true)
  transactions  Transaction[]
  bankTransfers Bank[]
  balances      Balance[]     @relation("userBalance")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float?
  currency  String?
  type      String?
  customer  String?
  status    String?
  reference String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  Bank      Bank[]
}

model Balance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  USD       Float    @default(0.00)
  NGN       Float    @default(0.00)
  EUR       Float    @default(0.00)
  GPB       Float    @default(0.00)
  createdAt DateTime @default(now())
  user      User     @relation("userBalance", fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model Bank {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  account_bank     Int
  account_number   Int
  beneficiary_name String
  amount           Int
  reference        String
  currency         String       @default("NGN")
  narration        String?
  status           String       @default("PENDING")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  transactionId    String       @db.ObjectId
  Transaction      Transaction? @relation(fields: [transactionId], references: [id])
  User             User?        @relation(fields: [userId], references: [id])
  userId           String?      @db.ObjectId
}
